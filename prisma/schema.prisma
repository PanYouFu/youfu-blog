// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

// 使用 postgresql 作为数据库
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid()) // @id()为主键；@default() 用来设置默认值
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TagTypeEnum {
  // 通用
  ALL
  // 仅用于blog
  BLOG
  // 仅用于片段
  SNIPPET
  // 仅用于笔记
  NOTE
}

model Tag {
  name     String      @unique
  blogs    Blog[]
  snippets Snippet[]
  notes    Note[]
  type     TagTypeEnum @default(ALL)

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  title       String  @unique
  description String
  body        String  @db.Text
  cover       String?
  author      String?
  published   Boolean @default(false)
  tags        Tag[]

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Snippet {
  title       String  @unique
  description String
  body        String  @db.Text
  published   Boolean @default(false)
  tags        Tag[]

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  body      String  @db.Text
  published Boolean @default(false)
  tags      Tag[]

  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
